package main

import (
	"fmt"
	"sync"
)

// time.Sleep использовать нельзя. это будет не валидным ответом на собеседовании
// Расскажи подробно что происходит
// Как сделать так, чтобы работало оставив канал небуферезированным?
func main() {
	ch := make(chan int)
	wg := &sync.WaitGroup{}
	wg.Add(3)
	for i := 0; i < 3; i++ {
		go func(v int) {
			defer wg.Done()
			ch <- v * v
		}(i)
	}
	wg.Wait()
	var sum int
	for v := range ch {
		sum += v
	}
	fmt.Printf("result: %d\n", sum)
}

/*
Создали не буферизированный канал, создали метод &sync.WaitGroup{} с указателем,
указали количество горутин в wg.Add(3), в цикле создали три горутины,
в которых умножали номер каждой итерации друг на друга и передавали в канал,
ch <- v * v здесь горутина блокируется, потому что канал не буферизированный,
из-за этого не может завершиться wg.Wait(), создается var sum int,
в цикле range пытаемся сложить сумму всех чисел из канала и вывести
*/

/*
func main() {
	ch := make(chan int)

	for i := 0; i < 3; i++ {
		go func(v int) {
			ch <- v * v
		}(i)
	}

	var sum int
	for i := 0; i < 3; i++ {
		sum += <-ch
	}

	fmt.Printf("result: %d\n", sum)
}
Я убрал &sync.WaitGroup{} и поменял условия второго цикла, на условия первого,
я так решил впервый раз, потом узнал что можно wg.Wait() положить в другую горутину и закрыть там каналы
*/
